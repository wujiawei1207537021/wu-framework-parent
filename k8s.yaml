---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.eip.work/displayName: cloud-nacos
    k8s.eip.work/ingress: 'false'
    k8s.eip.work/service: ClusterIP
    k8s.eip.work/workload: cloud-nacos
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-nacos
  name: cloud-nacos
  namespace: wujiawei
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.eip.work/layer: cloud
      k8s.eip.work/name: cloud-nacos
  serviceName: 'cloud-nacos'
  template:
    metadata:
      labels:
        k8s.eip.work/layer: cloud
        k8s.eip.work/name: cloud-nacos
    spec:
      containers:
        - env:
            - name: MODE
              value: standalone
          image: nacos/nacos-server
          imagePullPolicy: Always
          name: nacos-server
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /home/nacos/data
              name: nacos-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        annotations:
          k8s.eip.work/pvcType: Dynamic
        name: nacos-data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 10Gi
        storageClassName: nfs1-storage
        volumeMode: Filesystem

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.eip.work/displayName: cloud-nacos
    k8s.eip.work/workload: cloud-nacos
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-nacos
  name: cloud-nacos
  namespace: wujiawei
spec:
  externalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: wthymr1
      nodePort: 30501
      port: 8848
      protocol: TCP
      targetPort: 8848
  selector:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-nacos
  sessionAffinity: None
  type: NodePort

#  mysql
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: wujiawei
  name: cloud-mysql
  annotations:
    k8s.eip.work/workload: cloud-mysql
    k8s.eip.work/displayName: 数据库
    k8s.eip.work/service: NodePort
    k8s.eip.work/ingress: 'false'
  labels:
    k8s.eip.work/layer: db
    k8s.eip.work/name: cloud-mysql
spec:
  selector:
    matchLabels:
      k8s.eip.work/layer: db
      k8s.eip.work/name: cloud-mysql
  replicas: 1
  template:
    metadata:
      labels:
        k8s.eip.work/layer: db
        k8s.eip.work/name: cloud-mysql
    spec:
      restartPolicy: Always
      initContainers: [ ]
      containers:
        - image: 'mysql:latest'
          imagePullPolicy: Always
          name: mysql
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
            - name: mysql-cnf-map
              mountPath: /etc/mysql/conf.d/custom.cnf
              subPath: custom.cnf
            - name: tz
              mountPath: /etc/localtime
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
      volumes:
        - name: mysql-cnf-map
          configMap:
            name: mysql-cnf
            items:
              - key: cnf
                path: custom.cnf
            defaultMode: 420
        - name: tz
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
            type: File
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
        annotations:
          k8s.eip.work/pvcType: Dynamic
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 10Gi
        storageClassName: nfs1-storage
  serviceName: cloud-mysql

---
apiVersion: v1
kind: Service
metadata:
  namespace: wujiawei
  name: cloud-mysql
  annotations:
    k8s.eip.work/workload: cloud-mysql
    k8s.eip.work/displayName: 数据库
  labels:
    k8s.eip.work/layer: db
    k8s.eip.work/name: cloud-mysql
spec:
  selector:
    k8s.eip.work/layer: db
    k8s.eip.work/name: cloud-mysql
  type: NodePort
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
      name: wthymr
      nodePort: 30502
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: wujiawei
  name: cloud-redis
  annotations:
    k8s.eip.work/workload: cloud-redis
    k8s.eip.work/displayName: redis
    k8s.eip.work/service: NodePort
    k8s.eip.work/ingress: 'false'
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-redis
spec:
  selector:
    matchLabels:
      k8s.eip.work/layer: cloud
      k8s.eip.work/name: cloud-redis
  template:
    metadata:
      labels:
        k8s.eip.work/layer: cloud
        k8s.eip.work/name: cloud-redis
    spec:
      restartPolicy: Always
      initContainers: [ ]
      containers:
        - image: 'redis'
          imagePullPolicy: Always
          name: redis
          command:
            - /conf/init.sh
          args:
            - redis-server
            - /conf/redis.conf
          volumeMounts:
            - name: tz
              mountPath: /etc/localtime
            - name: redis-data
              mountPath: /data
            - name: conf
              mountPath: /conf
          securityContext:
            privileged: true
          resources:
            limits:
              memory: 100Mi
            requests:
              memory: 80Mi
      volumes:
        - name: tz
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
            type: File
        - name: conf
          configMap:
            name: redis-cnf
            defaultMode: 493
  replicas: 1
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        annotations:
          k8s.eip.work/pvcType: Dynamic
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 1Gi
        storageClassName: nfs1-storage
  serviceName: cloud-redis

---
apiVersion: v1
kind: Service
metadata:
  namespace: wujiawei
  name: cloud-redis
  annotations:
    k8s.eip.work/workload: cloud-redis
    k8s.eip.work/displayName: redis
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-redis
spec:
  selector:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-redis
  type: NodePort
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: iyekm6
      nodePort: 30503

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: wujiawei
  name: cloud-nginx
  annotations:
    k8s.eip.work/workload: cloud-nginx
    k8s.eip.work/displayName: 前端
    k8s.eip.work/service: NodePort
    k8s.eip.work/ingress: 'false'
  labels:
    k8s.eip.work/layer: web
    k8s.eip.work/name: cloud-nginx
spec:
  selector:
    matchLabels:
      k8s.eip.work/layer: web
      k8s.eip.work/name: cloud-nginx
  template:
    metadata:
      labels:
        k8s.eip.work/layer: web
        k8s.eip.work/name: cloud-nginx
    spec:
      restartPolicy: Always
      initContainers: [ ]
      containers:
        - image: 'nginx:1.13.0-alpine'
          imagePullPolicy: IfNotPresent
          name: nginx
          volumeMounts:
            - name: default-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-html
              mountPath: /usr/share/nginx/html
            - name: tz
              mountPath: /etc/localtime
          resources:
            limits:
              memory: 50Mi
            requests:
              memory: 50Mi
          env: [ ]
      volumes:
        - name: default-conf
          configMap:
            name: nginx-cnf
            items:
              - key: default-conf
                path: default.conf
            defaultMode: 420
        - name: nginx-conf
          configMap:
            name: nginx-cnf
            items:
              - key: nginx-conf
                path: nginx.conf
            defaultMode: 420
        - name: tz
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
            type: File
  replicas: 1
  volumeClaimTemplates:
    - metadata:
        name: nginx-html
        annotations:
          k8s.eip.work/pvcType: Dynamic
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 200Mi
        storageClassName: nfs1-storage
  serviceName: cloud-nginx

---
apiVersion: v1
kind: Service
metadata:
  namespace: wujiawei
  name: cloud-nginx
  annotations:
    k8s.eip.work/workload: cloud-nginx
    k8s.eip.work/displayName: 前端
  labels:
    k8s.eip.work/layer: web
    k8s.eip.work/name: cloud-nginx
spec:
  selector:
    k8s.eip.work/layer: web
    k8s.eip.work/name: cloud-nginx
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: aswmqa
      nodePort: 30500
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: wujiawei
  name: cloud-gateway
  annotations:
    k8s.eip.work/workload: cloud-gateway
    k8s.eip.work/displayName: 网关
    k8s.eip.work/service: NodePort
    k8s.eip.work/ingress: 'false'
  labels:
    k8s.eip.work/layer: gateway
    k8s.eip.work/name: cloud-gateway
spec:
  selector:
    matchLabels:
      k8s.eip.work/layer: gateway
      k8s.eip.work/name: cloud-gateway
  template:
    metadata:
      labels:
        k8s.eip.work/layer: gateway
        k8s.eip.work/name: cloud-gateway
    spec:
      restartPolicy: Always
      initContainers: [ ]
      containers:
        - image: 'docker-registry.root.com/root/cloud-gateway:root-wujiawei.0_latest'
          imagePullPolicy: Always
          name: cloud-gateway
          #          resources:
          #            limits:
          #              memory: 768Mi
          #            requests:
          #              memory: 768Mi
          envFrom:
            - configMapRef:
                name: common-cnf
  replicas: 1

---
apiVersion: v1
kind: Service
metadata:
  namespace: wujiawei
  name: cloud-gateway
  annotations:
    k8s.eip.work/workload: cloud-gateway
    k8s.eip.work/displayName: GateWay网关
  labels:
    k8s.eip.work/layer: gateway
    k8s.eip.work/name: cloud-gateway
spec:
  selector:
    k8s.eip.work/layer: gateway
    k8s.eip.work/name: cloud-gateway
  type: ClusterIP
  ports:
    - port: 7777
      targetPort: 7777
      protocol: TCP
      name: td7aai
      nodePort: 0

#      influxdb
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.kuboard.cn/displayName: cloud-influxdb
  labels:
    k8s.kuboard.cn/layer: db
    k8s.kuboard.cn/name: cloud-influxdb
  name: cloud-influxdb
  namespace: wujiawei
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: db
      k8s.kuboard.cn/name: cloud-influxdb
  serviceName: cloud-influxdb
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: db
        k8s.kuboard.cn/name: cloud-influxdb
    spec:
      containers:
        - env:
            - name: DOCKER_INFLUXDB_INIT_MODE
              value: setup
            - name: DOCKER_INFLUXDB_INIT_USERNAME
              value: root
            - name: DOCKER_INFLUXDB_INIT_PASSWORD
              value: root-influxdb
            - name: DOCKER_INFLUXDB_INIT_ORG
              value: cloud-org
            - name: DOCKER_INFLUXDB_INIT_BUCKET
              value: cloud-bucket
            - name: DOCKER_INFLUXDB_INIT_RETENTION
              value: 1w
          image: 'influxdb:2.0'
          imagePullPolicy: IfNotPresent
          name: cloud-influxdb
          securityContext:
            privileged: true
            capabilities:
              add:
                - "NET_ADMIN"
          resources: { }
          terminationMessagePolicy: File
          volumeMounts:
            - name: tz
              mountPath: /etc/localtime
            - name: influx-data
              mountPath: /var/lib/influxdb2
      volumes:
        - name: tz
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
            type: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: influx-data
        annotations:
          k8s.eip.work/pvcType: Dynamic
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 200Gi
        storageClassName: nfs1-storage

---
apiVersion: v1
kind: Service
metadata:
  annotations: { }
  labels:
    k8s.kuboard.cn/layer: db
    k8s.kuboard.cn/name: cloud-influxdb
  name: cloud-influxdb
  namespace: wujiawei

spec:
  externalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: dacrpq
      nodePort: 30506
      port: 8086
      protocol: TCP
      targetPort: 8086
  selector:
    k8s.kuboard.cn/layer: db
    k8s.kuboard.cn/name: cloud-influxdb
  sessionAffinity: None
  type: NodePort


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.kuboard.cn/displayName: cloud-pulsar
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-pulsar
  name: cloud-pulsar
  namespace: wujiawei
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: cloud
      k8s.kuboard.cn/name: cloud-pulsar
  serviceName: cloud-pulsar
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: cloud
        k8s.kuboard.cn/name: cloud-pulsar
    spec:
      containers:
        - command:
            - sh
            - -c
            - "bin/pulsar standalone"
          image: apachepulsar/pulsar-all:2.8.0
          imagePullPolicy: IfNotPresent
          name: cloud-pulsar
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /pulsar/data
              name: pulsar-data
            - mountPath: /pulsar/conf/broker.conf
              name: broker-conf
              subPath: broker.conf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            items:
              - key: broker_conf
                path: broker.conf
            name: pulsar-config
          name: broker-conf
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        annotations:
          k8s.eip.work/pvcType: Dynamic
        name: pulsar-data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 20Gi
        storageClassName: nfs1-storage
        volumeMode: Filesystem


---
apiVersion: v1
kind: Service
metadata:
  annotations: { }
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-pulsar
  name: cloud-pulsar
  namespace: wujiawei
spec:
  externalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: nxmc43
      nodePort: 30507
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: xxw76b
      nodePort: 30508
      port: 6650
      protocol: TCP
      targetPort: 6650
  selector:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-pulsar
  sessionAffinity: None
  type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deprecated.daemonset.template.generation: '1'
    k8s.kuboard.cn/displayName: pulsar管理工具UI
  labels:
    k8s.kuboard.cn/layer: monitor
    k8s.kuboard.cn/name: pulsar-manager
  name: pulsar-manager
  namespace: wujiawei
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: monitor
      k8s.kuboard.cn/name: pulsar-manager
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: monitor
        k8s.kuboard.cn/name: pulsar-manager
    spec:
      containers:
        - env:
            - name: SPRING_CONFIGURATION_FILE
              value: /pulsar-manager/pulsar-manager/application.properties
          image: apachepulsar/pulsar-manager
          command:
            - sh
            - -c
            - "sed -i '/^default.environment.name/ s|.*|default.environment.name=pulsar-standalone|' /pulsar-manager/pulsar-manager/application.properties & \
                         sed -i '/^default.environment.service_url/ s|.*|default.environment.service_url=http://cloud-pulsar:8080|' /pulsar-manager/pulsar-manager/application.properties & \
                         /pulsar-manager/entrypoint.sh & \
                         tail -F /pulsar-manager/pulsar-manager/pulsar-manager.log"
          imagePullPolicy: Always
          name: pulsar-manager
          resources: { }
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  annotations: { }
  labels:
    k8s.kuboard.cn/layer: monitor
    k8s.kuboard.cn/name: pulsar-manager
  name: pulsar-manager
  namespace: wujiawei
spec:
  externalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: 4kdjxc
      nodePort: 30509
      port: 9527
      protocol: TCP
      targetPort: 9527
    - name: nnk5m8
      nodePort: 30720
      port: 7750
      protocol: TCP
      targetPort: 7750
  selector:
    k8s.kuboard.cn/layer: monitor
    k8s.kuboard.cn/name: pulsar-manager
  sessionAffinity: None
  type: NodePort

#添加账号
#  CSRF_TOKEN=$(curl http://pulsar-manager:7750/pulsar-manager/csrf-token)
#  curl \
#-H "X-XSRF-TOKEN: $CSRF_TOKEN" \
#-H "Cookie: XSRF-TOKEN=$CSRF_TOKEN;" \
#-H 'Content-Type: application/json' \
#  -X PUT http://pulsar-manager:7750/pulsar-manager/users/superuser \
#-d '{"name": "pulsar", "password": "pulsar", "description": "pulsar", "email": "username@test.org"}'

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.kuboard.cn/displayName: cloud-rabbitmq
    k8s.kuboard.cn/workload: cloud-rabbitmq
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-rabbitmq
  name: cloud-rabbitmq
  namespace: wujiawei
spec:
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: cloud
      k8s.kuboard.cn/name: cloud-rabbitmq
  serviceName: cloud-rabbitmq
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: cloud
        k8s.kuboard.cn/name: cloud-rabbitmq
    spec:
      containers:
        - env:
            - name: RABBITMQ_DEFAULT_USER
              value: admin
            - name: RABBITMQ_DEFAULT_PASS
              value: root
          image: 'rabbitmq:3-management'
          imagePullPolicy: IfNotPresent
          name: cloud-rabbitmq
          resources: { }
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: rabbitmq-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
        annotations:
          k8s.eip.work/pvcType: Dynamic
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 20Gi
        storageClassName: nfs1-storage

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.kuboard.cn/workload: cloud-rabbitmq
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-rabbitmq
  name: cloud-rabbitmq
  namespace: wujiawei
spec:
  externalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: sfdpd6
      nodePort: 30504
      port: 15672
      protocol: TCP
      targetPort: 15672
    - name: qnebyd
      nodePort: 30505
      port: 5672
      protocol: TCP
      targetPort: 5672
  selector:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-rabbitmq
  sessionAffinity: None
  type: NodePort

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.kuboard.cn/displayName: minio存储服务器
  labels:
    k8s.kuboard.cn/layer: db
    k8s.kuboard.cn/name: cloud-minio
  name: cloud-minio
  namespace: wujiawei
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: db
      k8s.kuboard.cn/name: cloud-minio
  serviceName: ''
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: db
        k8s.kuboard.cn/name: cloud-minio
    spec:
      containers:
        - args:
            - server
            - /data
            - '--console-address'
            - ':30722'
          env:
            - name: MINIO_ROOT_USER
              value: admin
            - name: MINIO_ROOT_PASSWORD
              value: root1234
          image: minio/minio
          imagePullPolicy: Always
          name: cloud-minio
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /data
              name: minio-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        annotations:
          k8s.eip.work/pvcType: Dynamic
        name: minio-data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 20Gi
        storageClassName: nfs1-storage
        volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  annotations: { }
  labels:
    k8s.kuboard.cn/layer: db
    k8s.kuboard.cn/name: cloud-minio
  name: cloud-minio
  namespace: wujiawei
spec:
  externalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: zwjxk2
      nodePort: 30721
      port: 9000
      protocol: TCP
      targetPort: 9000
    - name: awkbce
      nodePort: 30722
      port: 30722
      protocol: TCP
      targetPort: 30722
  selector:
    k8s.kuboard.cn/layer: db
    k8s.kuboard.cn/name: cloud-minio
  sessionAffinity: None
  type: NodePort




---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deprecated.daemonset.template.generation: '1'
    k8s.kuboard.cn/displayName: cloud-flink
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-flink
  name: cloud-flink
  namespace: wujiawei
spec:
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: cloud
      k8s.kuboard.cn/name: cloud-flink
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: cloud
        k8s.kuboard.cn/name: cloud-flink
    spec:
      containers:
        - name: flink-jobmanager
          args:
            - jobmanager
          env:
            - name: JOB_MANAGER_RPC_ADDRESS
              value: flink-jobmanager
          image: flink
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
              hostPort: 8081
              protocol: TCP
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - name: flink-taskmanager
          args:
            - taskmanager
          env:
            - name: JOB_MANAGER_RPC_ADDRESS
              value: flink-jobmanager
          image: flink
          imagePullPolicy: Always
          resources: { }
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler

---
apiVersion: v1
kind: Service
metadata:
  annotations: { }
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-flink
  name: cloud-flink
  namespace: wujiawei
spec:
  ipFamilyPolicy: SingleStack
  ports:
    - name: 3sdpt3
      nodePort: 30723
      port: 8081
      protocol: TCP
      targetPort: 8081
  selector:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-flink
  sessionAffinity: None
  type: NodePort

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.kuboard.cn/displayName: 分布式调度
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-xxl-job-admin
  name: cloud-xxl-job-admin
  namespace: wujiawei
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: cloud
      k8s.kuboard.cn/name: cloud-xxl-job-admin
  serviceName: ''
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: cloud
        k8s.kuboard.cn/name: cloud-xxl-job-admin
    spec:
      containers:
        - env:
            - name: PARAMS
              value: >-
                --spring.datasource.url=jdbc:mysql://cloud-mysql:3306/xxl_job?allowMultiQueries=true&useUnicode=true&autoReconnect=true&useAffectedRows=true&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
                --spring.datasource.username=xxl_job
                --spring.datasource.password=root
          image: 'xuxueli/xxl-job-admin'
          imagePullPolicy: IfNotPresent
          name: xxl-job-admin
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /temp
              name: job-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        annotations:
          k8s.eip.work/pvcType: Dynamic
        name: job-data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 5Gi
        storageClassName: nfs1-storage
        volumeMode: Filesystem

---
apiVersion: v1
kind: Service
metadata:
  annotations: { }
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-xxl-job-admin
  name: cloud-xxl-job-admin
  namespace: wujiawei
spec:
  ipFamilyPolicy: SingleStack
  ports:
    - name: 4ndzaj
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-xxl-job-admin
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.kuboard.cn/displayName: cloud-mqtt
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-mqtt
  name: cloud-mqtt
  namespace: wujiawei
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: cloud
      k8s.kuboard.cn/name: cloud-mqtt
  serviceName: ''
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: cloud
        k8s.kuboard.cn/name: cloud-mqtt
    spec:
      containers:
        - image: registry.cn-hangzhou.aliyuncs.com/synbop/emqttd:2.3.6
          imagePullPolicy: IfNotPresent
          name: cloud-mqtt
          resources: { }
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /data
              name: mqtt-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        annotations:
          k8s.eip.work/pvcType: Dynamic
        name: mqtt-data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 20Gi
        storageClassName: nfs1-storage
        volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  annotations: { }
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-mqtt
  name: cloud-mqtt
  namespace: wujiawei
spec:
  externalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: wndgz2
      nodePort: 30725
      port: 18083
      protocol: TCP
      targetPort: 18083
    - name: yzmyjc
      nodePort: 30726
      port: 1883
      protocol: TCP
      targetPort: 1883
  selector:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: cloud-mqtt
  sessionAffinity: None
  type: NodePort


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.kuboard.cn/displayName: ngrok
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: ngrok
  name: ngrok
  namespace: wujiawei
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: cloud
      k8s.kuboard.cn/name: ngrok
  serviceName: ngrok
  template:
    metadata:
      labels:
        k8s.kuboard.cn/layer: cloud
        k8s.kuboard.cn/name: ngrok
    spec:
      containers:
        - command:
            - /bin/sh
            - /server.sh
          env:
            - name: DOMAIN
              value: wu-framework.com
            - name: HTTP_ADDR
              value: '172.29.29.59:80'
            - name: HTTPS_ADDR
              value: '172.29.29.59:443'
            - name: TUNNEL_ADDR
              value: '172.29.29.58:4443'
          image: hteen/ngrok
          imagePullPolicy: Always
          name: ngrok
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /myfiles
              name: ngrok-bin-data
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        annotations:
          k8s.eip.work/pvcType: Dynamic
        name: ngrok-bin-data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 200Mi
        storageClassName: nfs1-storage
        volumeMode: Filesystem


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.eip.work/displayName: cloud-redisearch
    k8s.eip.work/ingress: 'false'
    k8s.eip.work/service: NodePort
    k8s.eip.work/workload: cloud-redisearch
    k8s.kuboard.cn/workload: cloud-redisearch
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-redisearch
    k8s.kuboard.cn/name: cloud-redisearch
  name: cloud-redisearch
  namespace: wujiawei
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.eip.work/layer: cloud
      k8s.eip.work/name: cloud-redisearch
      k8s.kuboard.cn/name: cloud-redisearch
  serviceName: cloud-redisearch
  template:
    metadata:
      labels:
        k8s.eip.work/layer: cloud
        k8s.eip.work/name: cloud-redisearch
        k8s.kuboard.cn/name: cloud-redisearch
    spec:
      containers:
        - image: redislabs/redisearch
          imagePullPolicy: Always
          name: cloud-redisearch
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
      volumes:
        - hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
            type: File
          name: tz
        - configMap:
            defaultMode: 493
            name: redis-cnf
          name: conf
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        annotations:
          k8s.eip.work/pvcType: Dynamic
        name: redis-data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 1Gi
        storageClassName: nfs1-storage
        volumeMode: Filesystem

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.eip.work/displayName: cloud-redisearch
    k8s.eip.work/workload: cloud-redisearch
    k8s.kuboard.cn/workload: cloud-redisearch
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-redisearch
    k8s.kuboard.cn/name: cloud-redisearch
  name: cloud-redisearch
  namespace: wujiawei
spec:
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: iyekm6
      nodePort: 30505
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-redisearch
    k8s.kuboard.cn/name: cloud-redisearch
  sessionAffinity: None
  type: NodePort


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    k8s.eip.work/displayName: cloud-rejson
    k8s.eip.work/ingress: 'false'
    k8s.eip.work/service: NodePort
    k8s.eip.work/workload: cloud-rejson
    k8s.kuboard.cn/workload: cloud-rejson
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-rejson
    k8s.kuboard.cn/name: cloud-rejson
  name: cloud-rejson

spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.eip.work/layer: cloud
      k8s.eip.work/name: cloud-rejson
      k8s.kuboard.cn/name: cloud-rejson
  serviceName: cloud-rejson
  template:
    metadata:
      labels:
        k8s.eip.work/layer: cloud
        k8s.eip.work/name: cloud-rejson
        k8s.kuboard.cn/name: cloud-rejson
    spec:
      containers:
        - image: redislabs/rejson
          imagePullPolicy: Always
          name: cloud-rejson
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
      volumes:
        - hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
            type: File
          name: tz
        - configMap:
            defaultMode: 493
            name: redis-cnf
          name: conf
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        annotations:
          k8s.eip.work/pvcType: Dynamic
        name: redis-data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 1Gi
        storageClassName: nfs1-storage
        volumeMode: Filesystem

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    k8s.eip.work/displayName: cloud-rejson
    k8s.eip.work/workload: cloud-rejson
    k8s.kuboard.cn/workload: cloud-rejson
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-rejson
    k8s.kuboard.cn/name: cloud-rejson
  name: cloud-rejson
  namespace: wujiawei
spec:
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilyPolicy: SingleStack
  ports:
    - name: iyekm6
      nodePort: 30504
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: cloud-rejson
    k8s.kuboard.cn/name: cloud-rejson
  sessionAffinity: None
  type: NodePort


