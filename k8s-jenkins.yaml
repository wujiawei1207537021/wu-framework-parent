---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: normal-system
  name: jenkins
  annotations:
    k8s.eip.work/workload: jenkins
    k8s.eip.work/displayName: jenkins发布部署
    k8s.eip.work/service: ClusterIP
    k8s.eip.work/ingress: 'false'
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: jenkins
spec:
  selector:
    matchLabels:
      k8s.eip.work/layer: cloud
      k8s.eip.work/name: jenkins
  replicas: 1
  template:
    metadata:
      labels:
        k8s.eip.work/layer: cloud
        k8s.eip.work/name: jenkins
    spec:
      restartPolicy: Always
      initContainers: [ ]
      containers:
        - name: jenkins
          image: 'jenkins/jenkins'
          imagePullPolicy: Always
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
            - name: tz
              mountPath: /etc/localtime
          #          resources:
          #            limits:
          #              memory: 2Gi
          #            requests:
          #              memory: 2Gi
          env:
            - name: JAVA_OPTS
              value: -Xms256m -Xmx256m
      volumes:
        - name: tz
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
            type: File
  volumeClaimTemplates:
    - metadata:
        name: jenkins-data
        annotations:
          k8s.eip.work/pvcType: Dynamic
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 5Gi
        storageClassName: nfs1-storage
  serviceName: cloud-jenkins

---
apiVersion: v1
kind: Service
metadata:
  namespace: normal-system
  name: jenkins
  annotations:
    k8s.eip.work/workload: jenkins
    k8s.eip.work/displayName: jenkins发布部署
  labels:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: jenkins
spec:
  selector:
    k8s.eip.work/layer: cloud
    k8s.eip.work/name: jenkins
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: jenkins
      nodePort: 30506